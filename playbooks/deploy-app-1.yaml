- hosts: localhost
  connection: local
  vars:
    target_clusters:
      - sno-worker-01
      - sno-worker-02
      - 5g-deployment-lab
    kubeconfig_output_path: "/tmp/kubeconfig-extracted.yaml" # Ruta donde se guardará el kubeconfig
    deploy_emoji: False
  tasks:
      - community.general.slack:
          token: "{{ slack_token }}"
          msg: |
            "A new TALM event is received at {{ ansible_date_time.iso8601 }}:
            The configuration stage for cluster {{ item.cguName }} managed by the {{ item.leafHubName }} hub cluster SUCCEEDED. The cluster is ready to run workloads. Deployment of the emojivote application is started"
          channel: '#infra-notifications'
          icon_emoji: ':rotating_light:'
        loop: "{{ ansible_eda.event.body }}"
        when:
          - item.eventAnnotations['cgu.openshift.io/event-type'] == "global"
          - item.cguName in target_clusters
          - item.reason == "CguSuccess"
        register: slack_notification_result # Registramos el resultado del slack para depuración

      - name: Asignar el valor de item.cguName a la variable 'cluster'
        # Este set_fact se ejecutará por cada elemento del loop anterior que cumplió las condiciones 'when'
        ansible.builtin.set_fact:
          cluster: "{{ item.item.cguName }}" # 'item.item' es necesario porque 'slack_notification_result.results'
                                            # contiene el 'item' original en su propiedad 'item'.
        loop: "{{ slack_notification_result.results }}" # Iteramos sobre los resultados del task anterior
        when:
          - item.item.eventAnnotations['cgu.openshift.io/event-type'] == "global" # Vuelves a aplicar las condiciones si lo necesitas
          - item.item.cguName in target_clusters
          - item.item.reason == "CguSuccess"

      - name: Usar la variable 'cluster' (mostrar el último valor asignado)
        ansible.builtin.debug:
          msg: "El último cluster procesado exitosamente fue: {{ cluster }}"


#      - name: Create the kubeconfig path
#        ansible.builtin.set_fact:
#          kubeconfig_tmp: "{{ 'kube_' + item.cguName | replace('-','_') }}"
#        loop: "{{ ansible_eda.event.body }}"
#        when:
#          - item.eventAnnotations['cgu.openshift.io/event-type'] == "global"
#          - item.cguName in target_clusters
#          - item.reason == "CguSuccess"
#
#      - name: name of the kubeconfig
#        ansible.builtin.debug:
#          var:  kubeconfig_tmp

      - name: path to the kubeconfig file
        kubernetes.core.k8s_info:
          kubeconfig: "{{ kube_local_cluster }}"
          api_version: v1
          kind: Secret
          name: "{{ cluster }}-admin-kubeconfig"
          #name: "sno-worker-02-admin-kubeconfig"
          #name: "{{ lookup('ansible.builtin.vars', item.cguName + '-admin-kubeconfig') }}"
          namespace: "{{ cluster }}"
        register: kubeconfig_secret_info

      - name: Mostrar ruta del kubeconfig extraído
        ansible.builtin.debug: 
          var: kubeconfig_secret_info

      - name: Verificar si el Secret existe y contiene el 'kubeconfig'
        ansible.builtin.fail:
          msg: "El Secret del cluster {{ cluster }} no se encontró o no contiene la clave 'kubeconfig'."
        when:
          - not kubeconfig_secret_info.resources | default([])
          - not (kubeconfig_secret_info.resources[0].data | default({})).kubeconfig is defined

      - name: Decodificar y guardar el kubeconfig en un archivo
        ansible.builtin.copy:
          content: "{{ kubeconfig_secret_info.resources[0].data.kubeconfig | b64decode }}"
          dest: "{{ kubeconfig_output_path }}"
          mode: '0600' # Permisos restrictivos para el archivo kubeconfig
        no_log: true # Evita que el contenido del kubeconfig se imprima en la salida del log
        when: (kubeconfig_secret_info.resources[0].data | default({})).kubeconfig is defined

      - name: Mostrar ruta del kubeconfig extraído
        ansible.builtin.debug:
          msg: "El kubeconfig se ha extraído y guardado en: {{ kubeconfig_output_path }}"
        when: (kubeconfig_secret_info.resources[0].data | default({})).kubeconfig is defined

      - name: Set KUBECONFIG environment variable
        set_fact:
          kubeconfig: "{{ kubeconfig_output_path }}"

#- name: path to the kubeconfig file
#        ansible.builtin.set_fact:
#          #kubeconfig: "{{ lookup('ansible.builtin.vars', 'kube_' + item.cguName | replace('-','_')) }}"
#          kubeconfig: "{{ kube_local_cluster }}"
#        loop: "{{ ansible_eda.event.body }}"
#        when: 
#          - item.eventAnnotations['cgu.openshift.io/event-type'] == "global"
#          - item.cguName in target_clusters
#          - item.reason == "CguSuccess"

      - name: Debug path to kubeconfig
        ansible.builtin.debug:
          var: kubeconfig

      - name: Deploy ns application to the cluster
        kubernetes.core.k8s:
          kubeconfig: "{{ kubeconfig }}"
          state: present
          api_version: v1
          kind: Namespace
          name: emojivoto
        register: result
        until: result.failed != true
        retries: 5
        delay: 10

      - name: Deploy web application to the cluster
        kubernetes.core.k8s:
          kubeconfig: "{{ kubeconfig }}"
          state: present
          src: "{{ item }}"
        register: result
        until: result.failed != true
        retries: 30
        delay: 10
        loop:
          - https://raw.githubusercontent.com/alosadagrande/eda-tests/refs/heads/main/emojivoto/deployment/web.yml
          - https://raw.githubusercontent.com/alosadagrande/eda-tests/refs/heads/main/emojivoto/deployment/emoji.yml
          - https://raw.githubusercontent.com/alosadagrande/eda-tests/refs/heads/main/emojivoto/deployment/voting.yml

      - name: Expose application to the internet
        kubernetes.core.k8s:
          kubeconfig: "{{ kubeconfig }}"
          state: present
          definition:
            apiVersion: "route.openshift.io/v1"
            kind: Route
            metadata:
              name: web
              namespace: emojivoto
            spec:
              port:
                targetPort: http
              to:
                kind: Service
                name: web-svc
                weight: 100
              wildcardPolicy: None

      - name: The application is ready 
        kubernetes.core.k8s_info:
          kubeconfig: "{{ kubeconfig }}"
          api_version: "route.openshift.io/v1"
          kind: Route
          name: web
          namespace: emojivoto
        register: emojivoto_route
        retries: 6 
        delay: 10
        until:
          - emojivoto_route is defined
          - emojivoto_route.resources | length > 0
          - emojivoto_route.resources[0].status is defined
          - emojivoto_route.resources[0].status.ingress[0].conditions[0].status == "True"
          - emojivoto_route.resources[0].status.ingress[0].host is defined

      - name: Application URL
        ansible.builtin.debug: 
          msg: "The application is ready at {{ emojivoto_route.resources[0].status.ingress[0].host }}" 

      - community.general.slack:
          token: "{{ slack_token }}"
          msg: ":white_check_mark: The workload has been deployed successfully and can be accessed at {{ emojivoto_route.resources[0].status.ingress[0].host }}" 
          channel: '#infra-notifications'
          icon_emoji: ':white_check_mark:'
