# This file contains tasks to process a single item from kubeconfig_secret_info_raw.results.
# 'item' here refers to the current result object from the loop in the parent playbook.

  - name: Provisioning of cluster {{ item.cguName }} finished successfully
    ansible.builtin.debug:
      msg: |
        "A new TALM event is received at {{ ansible_date_time.iso8601 }}:
        The configuration stage for cluster {{ item.cguName }} managed by the {{ item.leafHubName }} hub cluster SUCCEEDED. The cluster is ready to run workloads."

  - name: Get leaf hub cluster and set 'hub_cluster'
    # Este set_fact se ejecutará por cada elemento del loop anterior que cumplió las condiciones 'when'
    ansible.builtin.set_fact:
      hub_cluster: "{{ item.leafHubName }}"
    when: item.leafHubName != "local-cluster"

  - name: Get leaf hub cluster and set 'hub_cluster'
    # Este set_fact se ejecutará por cada elemento del loop anterior que cumplió las condiciones 'when'
    ansible.builtin.set_fact:
      hub_cluster: "local_cluster"
    when: item.leafHubName == "local-cluster"

  - name: Asignar el valor de item.cguName a la variable 'cluster'
    # Este set_fact se ejecutará por cada elemento del loop anterior que cumplió las condiciones 'when'
    ansible.builtin.set_fact:
      cluster: "{{ item.cguName }}" 

  - name: path to the managedsa token file
    kubernetes.core.k8s_info:
      kubeconfig: "{{ lookup('ansible.builtin.vars', 'kube_hub_' + hub_cluster) }}"
      #kubeconfig: "{{ kube_local_cluster }}"
      api_version: v1
      kind: Secret
      name: "{{ managedsa }}"
      namespace: "{{ cluster }}"
    register: token_secret_info

  - name: Mostrar ruta del kubeconfig extraído
    ansible.builtin.debug: 
      var: token_secret_info

  - name: Verificar si el Secret existe y contiene el 'token'
    ansible.builtin.fail:
      msg: "El Secret del cluster {{ cluster }} no se encontró o no contiene la clave 'kubeconfig'."
    when:
      - not token_secret_info.resources | default([])
      - not (token_secret_info.resources[0].data | default({})).token is defined

  - name: Decode and store the token in a variable
    ansible.builtin.set_fact:
      token: "{{ kubeconfig_secret_info.resources[0].data.token | b64decode }}"
    no_log: true # Evita que el contenido del kubeconfig se imprima en la salida del log
    when: (kubeconfig_secret_info.resources[0].data | default({})).token is defined


####################################


  - name: Obtain cluster API via ManagedCluster
    kubernetes.core.k8s_info:
      kubeconfig: "{{ lookup('ansible.builtin.vars', 'kube_hub_' + hub_cluster) }}"
      api_version: cluster.open-cluster-management.io/v1
      kind: ManagedCluster
      name: "{{ cluster }}"
    register: managedcluster_info

  - name: Decode and store the cluster API in a variable
    ansible.builtin.set_fact:
      cluster_api: "{{ token_secret_info.resources[0].status.clusterClaims['name=apiserverurl.openshift.io'].value }}"
    when: (kubeconfig_secret_info.resources[0].status | default({})).clusterClaims is defined

  - name: Debug path to kubeconfig
    ansible.builtin.debug:
      msg: "Token is {{ token }} and API is {{ cluster_api }}"

#  - name: Deploy ns application to the cluster
#    kubernetes.core.k8s:
#      kubeconfig: "{{ kubeconfig }}"
#      state: present
#      api_version: v1
#      kind: Namespace
#      name: emojivoto
#    register: result
#    until: result.failed != true
#    retries: 5
#    delay: 10
#
#  - name: Deploy web application to the cluster
#    kubernetes.core.k8s:
#      kubeconfig: "{{ kubeconfig }}"
#      state: present
#      src: "{{ item }}"
#    register: result
#    until: result.failed != true
#    retries: 30
#    delay: 10
#    loop:
#      - https://raw.githubusercontent.com/alosadagrande/eda-tests/refs/heads/main/emojivoto/deployment/web.yml
#      - https://raw.githubusercontent.com/alosadagrande/eda-tests/refs/heads/main/emojivoto/deployment/emoji.yml
#      - https://raw.githubusercontent.com/alosadagrande/eda-tests/refs/heads/main/emojivoto/deployment/voting.yml
#
#  - name: Expose application to the internet
#    kubernetes.core.k8s:
#      kubeconfig: "{{ kubeconfig }}"
#      state: present
#      definition:
#        apiVersion: "route.openshift.io/v1"
#        kind: Route
#        metadata:
#          name: web
#          namespace: emojivoto
#        spec:
#          port:
#            targetPort: http
#          to:
#            kind: Service
#            name: web-svc
#            weight: 100
#          wildcardPolicy: None
#
#  - name: The application is ready 
#    kubernetes.core.k8s_info:
#      kubeconfig: "{{ kubeconfig }}"
#      api_version: "route.openshift.io/v1"
#      kind: Route
#      name: web
#      namespace: emojivoto
#    register: emojivoto_route
#    retries: 6 
#    delay: 10
#    until:
#      - emojivoto_route is defined
#      - emojivoto_route.resources | length > 0
#      - emojivoto_route.resources[0].status is defined
#      - emojivoto_route.resources[0].status.ingress[0].conditions[0].status == "True"
#      - emojivoto_route.resources[0].status.ingress[0].host is defined
#
#  - name: Application URL
#    ansible.builtin.debug: 
#      msg: "The application is ready at {{ emojivoto_route.resources[0].status.ingress[0].host }}" 
#
#  - community.general.slack:
#      token: "{{ slack_token }}"
#      msg: ":white_check_mark: The workload has been deployed successfully and can be accessed at {{ emojivoto_route.resources[0].status.ingress[0].host }}" 
#      channel: '#infra-notifications'
#      icon_emoji: ':white_check_mark:'
