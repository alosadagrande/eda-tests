# Reusable task to get cluster credentials (token and API)
# Input variables expected:
# - cluster_name: Name of the cluster (required)
# - hub_kubeconfig: Kubeconfig file to use (optional, defaults to kubeconfig_file)
# - hub_token: Hub token for API calls (optional, for leaf hub scenarios)
# - hub_api: Hub API endpoint (optional, for leaf hub scenarios)
# - managedsa: ManagedServiceAccount name (required)

- name: Determine authentication method
  ansible.builtin.set_fact:
    use_token_auth: "{{ (hub_token is defined) and (hub_api is defined) }}"

- name: Debug authentication method
  ansible.builtin.debug:
    msg: "Using {{ 'token authentication' if use_token_auth else 'kubeconfig authentication' }} for cluster {{ cluster_name }}"

# Get token secret using appropriate authentication method
- name: Get managedsa token secret (kubeconfig auth)
  kubernetes.core.k8s_info:
    kubeconfig: "{{ hub_kubeconfig | default(kubeconfig_file) }}"
    api_version: v1
    kind: Secret
    name: "{{ managedsa }}"
    namespace: "{{ cluster_name }}"
  register: token_secret_kubeconfig
  when: not use_token_auth

- name: Get managedsa token secret (token auth)
  kubernetes.core.k8s_info:
    api_key: "{{ hub_token }}"
    host: "{{ hub_api }}"
    validate_certs: false
    api_version: v1
    kind: Secret
    name: "{{ managedsa }}"
    namespace: "{{ cluster_name }}"
  register: token_secret_token
  when: use_token_auth

# Consolidate token secret result
- name: Set token secret result (kubeconfig auth)
  ansible.builtin.set_fact:
    token_secret_result: "{{ token_secret_kubeconfig }}"
  when: not use_token_auth

- name: Set token secret result (token auth)
  ansible.builtin.set_fact:
    token_secret_result: "{{ token_secret_token }}"
  when: use_token_auth

- name: Validate token secret exists
  ansible.builtin.fail:
    msg: "Secret for cluster {{ cluster_name }} not found or missing 'token' key"
  when:
    - token_secret_result.resources | default([]) | length == 0 or
      not (token_secret_result.resources[0].data | default({})).token is defined

# Get ManagedCluster info using appropriate authentication method
- name: Get ManagedCluster info for API endpoint (kubeconfig auth)
  kubernetes.core.k8s_info:
    kubeconfig: "{{ hub_kubeconfig | default(kubeconfig_file) }}"
    api_version: cluster.open-cluster-management.io/v1
    kind: ManagedCluster
    name: "{{ cluster_name }}"
  register: managedcluster_kubeconfig
  when: not use_token_auth

- name: Get ManagedCluster info for API endpoint (token auth)
  kubernetes.core.k8s_info:
    api_key: "{{ hub_token }}"
    host: "{{ hub_api }}"
    validate_certs: false
    api_version: cluster.open-cluster-management.io/v1
    kind: ManagedCluster
    name: "{{ cluster_name }}"
  register: managedcluster_token
  when: use_token_auth

# Consolidate managedcluster result
- name: Set managedcluster result (kubeconfig auth)
  ansible.builtin.set_fact:
    managedcluster_result: "{{ managedcluster_kubeconfig }}"
  when: not use_token_auth

- name: Set managedcluster result (token auth)
  ansible.builtin.set_fact:
    managedcluster_result: "{{ managedcluster_token }}"
  when: use_token_auth

- name: Extract credentials
  ansible.builtin.set_fact:
    extracted_token: "{{ token_secret_result.resources[0].data.token | b64decode }}"
    extracted_api: "{{ managedcluster_result.resources[0].spec.managedClusterClientConfigs[0].url }}"
  no_log: true
  when:
    - token_secret_result.resources | default([]) | length > 0
    - (token_secret_result.resources[0].data | default({})).token is defined
    - managedcluster_result.resources | default([]) | length > 0
    - (managedcluster_result.resources[0].spec.managedClusterClientConfigs[0] | default({})).url is defined

- name: Debug extracted credentials
  ansible.builtin.debug:
    msg: "Successfully extracted credentials for cluster {{ cluster_name }} - API: {{ extracted_api }}"
  when: extracted_api is defined 