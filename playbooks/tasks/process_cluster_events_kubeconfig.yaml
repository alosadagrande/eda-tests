# This file is used to extract the kubeconfig from the cluster and store it in the secret store.
# It also deploys the emojivoto application to the cluster.
# It uses the kubeconfig file to authenticate to the cluster.
# It handles both global hub and leaf hub scenarios.
- name: Generate safe execution variables (only for valid events)
  ansible.builtin.set_fact:
    execution_id: "{{ ansible_date_time.epoch }}-{{ ansible_pid | default(99999) }}"
    cluster_safe_name: "{{ item.cguName | regex_replace('[^a-zA-Z0-9]', '-') }}"
    leaf_hub_safe_name: "{{ item.leafHubName | regex_replace('[^a-zA-Z0-9]', '-') }}"
    cluster: "{{ item.cguName }}"
    is_global_hub: "{{ item.leafHubName == 'local-cluster' }}"

- name: Generate safe file paths (only for valid events)
  ansible.builtin.set_fact:
    kubeconfig_cluster_output_path: "{{ temp_base_dir }}/cluster-{{ cluster_safe_name }}-{{ execution_id }}.yaml"
    kubeconfig_leafhub_output_path: "{{ temp_base_dir }}/leaf-hub-{{ leaf_hub_safe_name }}-{{ execution_id }}.yaml"

- name: Log cluster provisioning success
  ansible.builtin.debug:
    msg: |
      TALM event received at {{ ansible_date_time.iso8601 }}:
      Cluster {{ item.cguName }} managed by {{ item.leafHubName }} hub SUCCEEDED.
      Cluster is ready for workloads.

- name: Log cluster processing start
  ansible.builtin.debug:
    msg: |
      ðŸ”’ SAFE PROCESSING - Execution ID: {{ execution_id }}
      Processing {{ 'Global Hub' if is_global_hub else 'Leaf Hub' }} scenario:
      - Cluster: {{ cluster }}
      - Hub: {{ item.leafHubName }}

# Handle Global Hub scenario
- name: Get kubeconfig from global hub
  block:
    - name: Extract cluster kubeconfig from global hub
      ansible.builtin.include_tasks: get_cluster_credentials_kubeconfig.yaml
      vars:
        cluster_name: "{{ cluster }}"
        
    - name: Set cluster kubeconfig
      ansible.builtin.set_fact:
        cluster_kubeconfig: "{{ extracted_kubeconfig }}"
        
  when: is_global_hub | bool

# Handle Leaf Hub scenario  
- name: Get kubeconfig from leaf hub
  block:
    - name: Step 1 - Extract leaf hub kubeconfig from global hub
      ansible.builtin.include_tasks: get_cluster_credentials_kubeconfig.yaml
      vars:
        cluster_name: "{{ item.leafHubName }}"
        
    - name: Set leaf hub kubeconfig
      ansible.builtin.set_fact:
        leaf_hub_kubeconfig_content: "{{ extracted_kubeconfig }}"
        
    - name: Create leaf hub kubeconfig credential in AAP
      ansible.builtin.include_tasks: store_aap_credentials_kubeconfig.yaml
      vars:
        cred_cluster_name: "{{ item.leafHubName }}"
        cred_kubeconfig_data: "{{ leaf_hub_kubeconfig_content }}"
        
    - name: Save leaf hub kubeconfig to unique temporary file
      ansible.builtin.copy:
        content: "{{ leaf_hub_kubeconfig_content }}"
        dest: "{{ kubeconfig_leafhub_output_path }}"
        mode: '0600'
      no_log: true
      
    - name: Step 2 - Extract target cluster kubeconfig via leaf hub
      ansible.builtin.include_tasks: get_cluster_credentials_kubeconfig.yaml
      vars:
        cluster_name: "{{ cluster }}"
        hub_kubeconfig: "{{ kubeconfig_leafhub_output_path }}"
        
    - name: Set cluster kubeconfig
      ansible.builtin.set_fact:
        cluster_kubeconfig: "{{ extracted_kubeconfig }}"
        
    - name: Remove leaf hub temp file immediately
      ansible.builtin.file:
        path: "{{ kubeconfig_leafhub_output_path }}"
        state: absent
      ignore_errors: true
        
  when: not (is_global_hub | bool)

# Common final tasks
- name: Save cluster kubeconfig to unique temporary file
  ansible.builtin.copy:
    content: "{{ cluster_kubeconfig }}"
    dest: "{{ kubeconfig_cluster_output_path }}"
    mode: '0600'
  no_log: true
  when: cluster_kubeconfig is defined

- name: Create cluster kubeconfig credential in AAP
  ansible.builtin.include_tasks: store_aap_credentials_kubeconfig.yaml
  vars:
    cred_cluster_name: "{{ cluster }}"
    cred_kubeconfig_data: "{{ cluster_kubeconfig }}"
  when: cluster_kubeconfig is defined

- name: Deploy application using kubeconfig
  ansible.builtin.include_tasks: deploy_emojivoto_kubeconfig.yaml
  vars:
    cluster_kubeconfig: "{{ kubeconfig_cluster_output_path }}"
  when: 
    - cluster_kubeconfig is defined
    - kubeconfig_cluster_output_path is defined

- name: Remove cluster temp file immediately after deployment
  ansible.builtin.file:
    path: "{{ kubeconfig_cluster_output_path }}"
    state: absent
  ignore_errors: true 
