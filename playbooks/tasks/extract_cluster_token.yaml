# This file extracts the cluster token and API from the provisioned cluster.
# It extracts or updates the credentials for the leaf hub cluster if the provisioned cluster is managed by a leaf hub.
# It saves the credential for the cluster in the secret store.
# It also deploys the emojivoto app in the cluster. 
  
  - name: Provisioning of cluster {{ item.cguName }} finished successfully
    ansible.builtin.debug:
      msg: |
        "A new TALM event is received at {{ ansible_date_time.iso8601 }}:
        The configuration stage for cluster {{ item.cguName }} managed by the {{ item.leafHubName }} hub cluster SUCCEEDED. The cluster is ready to run workloads."

  - name: Assign the value of item.cguName to the 'cluster' variable
    # This task assigns the cluster name to the 'cluster' variable
    ansible.builtin.set_fact:
      cluster: "{{ item.cguName }}"

  - name: Get credentials when the managed cluster is attached to global hub
    block:
      - name: Set variable hub_cluster to local_cluster
        # This block is executed when the cluster is managed by the global hub. See when condition at the end of the block.
        ansible.builtin.set_fact:
          hub_cluster: "local_cluster"

      - name: Obtain the managedsa token from the global hub
        # The secret token is stored in a ns inside the global hub which name is the cluster name
        kubernetes.core.k8s_info:
          kubeconfig: "{{ kubeconfig_file }}"
          api_version: v1
          kind: Secret
          name: "{{ managedsa }}"
          namespace: "{{ cluster }}"
        register: token_secret_info

      - name: Show the managedsa token secret
        ansible.builtin.debug: 
          var: token_secret_info

      - name: Verify if the secret exists and contains the 'token'
        ansible.builtin.fail:
          msg: "The secret of cluster {{ cluster }} was not found or it does not have the 'token' key"
        when:
          - not token_secret_info.resources | default([])
          - not (token_secret_info.resources[0].data | default({})).token is defined

      - name: Decode and store the token in a variable
        ansible.builtin.set_fact:
          cluster_token: "{{ token_secret_info.resources[0].data.token | b64decode }}"
        no_log: true # Avoid printing the content in the log output
        when: (token_secret_info.resources[0].data | default({})).token is defined

      - name: Obtain cluster API via ManagedCluster
        # Obtaining the managedcluster object that contains the cluster API
        kubernetes.core.k8s_info:
          kubeconfig: "{{ kubeconfig_file }}"
          api_version: cluster.open-cluster-management.io/v1
          kind: ManagedCluster
          name: "{{ cluster }}"
        register: managedcluster_info

      - name: Decode and store the cluster API in a variable
        # Sets the cluster API in the cluster_api variable
        ansible.builtin.set_fact:
          cluster_api: "{{ managedcluster_info.resources[0].spec.managedClusterClientConfigs[0].url }}"
        when: (managedcluster_info.resources[0].spec.managedClusterClientConfigs[0] | default({})).url is defined

      - name: Show the token and cluster API info.
        ansible.builtin.debug:
          msg: "Token is {{ cluster_token }} and API is {{ cluster_api }}"
 
    when: item.leafHubName == "local-cluster"

  - name: Get credentials when the managed cluster is attached to a leaf hub
    # First obtain the credentials for the leaf hub cluster. Next, use them to obtain the credentials for the managed cluster.
    block:
      - name: Get leaf hub cluster and set 'hub_cluster'
        # This block is executed when the cluster is managed by a leaf hub. See when condition at the end of the block 'when'
        ansible.builtin.set_fact:
          leaf_hub_cluster: "{{ item.leafHubName }}"

      - name: Obtain the leaf hub managedsa token from the global hub
        # First obtain the credentials for the leaf hub cluster.
        kubernetes.core.k8s_info:
          kubeconfig: "{{ kubeconfig_file }}"
          api_version: v1
          kind: Secret
          name: "{{ managedsa }}"
          namespace: "{{ leaf_hub_cluster }}"
        register: leaf_token_secret_info

      - name: Show the leaf hub managedsa token secret
        ansible.builtin.debug:
          var: leaf_token_secret_info

      - name: Verify if the leaf hub managedsa token secret exists and contains the 'token'
        ansible.builtin.fail:
          msg: "The secret of leaf hub cluster {{ leaf_hub_cluster }} was not found or it does not have the 'token' key"
        when:
          - not leaf_token_secret_info.resources | default([])
          - not (leaf_token_secret_info.resources[0].data | default({})).token is defined

      - name: Decode and store the leaf hub token in a variable
        ansible.builtin.set_fact:
          leaf_hub_token: "{{ leaf_token_secret_info.resources[0].data.token | b64decode }}"
        no_log: true # Avoid printing the content in the log output
        when: (leaf_token_secret_info.resources[0].data | default({})).token is defined

      - name: Obtain cluster leaf hub API via ManagedCluster
        # Obtaining the managedcluster object that contains the leaf hub cluster API
        kubernetes.core.k8s_info:
          kubeconfig: "{{ kubeconfig_file }}"
          api_version: cluster.open-cluster-management.io/v1
          kind: ManagedCluster
          name: "{{ leaf_hub_cluster }}"
        register: leaf_managedcluster_info

      - name: Decode and store the leaf hub cluster API in a variable
        # Sets the leaf hub cluster API in the leaf_hub_cluster_api variable
        ansible.builtin.set_fact:
          leaf_hub_cluster_api: "{{ leaf_managedcluster_info.resources[0].spec.managedClusterClientConfigs[0].url }}"
        when: (leaf_managedcluster_info.resources[0].spec.managedClusterClientConfigs[0] | default({})).url is defined

      - name: Show the leaf hub token and cluster API info.
        ansible.builtin.debug:
          msg: "Leaf Hub credentials:Token is {{ leaf_hub_token }} and API is {{ leaf_hub_cluster_api }}"
        when: 
          - leaf_hub_cluster_api is defined
          - leaf_hub_token is defined

      - name: Set facts and create or update credential for Leaf hub cluster
        block:
          - name: Set cluster name, token, and API facts for downstream tasks
            ansible.builtin.set_fact:
              cred_cluster_name: "{{ leaf_hub_cluster }}"
              cred_cluster_token: "{{ leaf_hub_token }}"
              cred_cluster_api: "{{ leaf_hub_cluster_api }}"
            when:
              - leaf_hub_token is defined
              - leaf_hub_cluster_api is defined
              - leaf_hub_cluster is defined

          - name: Create or update the credential for the Leaf hub cluster in the secret store
            # Store Bearer token and cluster API as credentials. 
            ansible.builtin.include_tasks: create_aap_credential_token.yaml # Secret store is AAP.
            when:
              - cred_cluster_token is defined
              - cred_cluster_api is defined
              - cred_cluster_name is defined

      # Next, extract the cluster credentials once we have the leaf hub credentials.
      
      - name: path to the cluster managedsa token file
        # The secret token is stored in a ns inside the leaf hub which name is the cluster name
        kubernetes.core.k8s_info:
          api_key: "{{ leaf_hub_token }}"
          host: "{{ leaf_hub_cluster_api }}"
          validate_certs: false
          api_version: v1
          kind: Secret
          name: "{{ managedsa }}"
          namespace: "{{ cluster }}"
        register: token_secret_info
 
      - name: Show the bearer token encrypted
        ansible.builtin.debug:
          var: token_secret_info

      - name: Verify if the cluster managedsa token secret exists and contains the 'token'
        ansible.builtin.fail:
          msg: "The secret of cluster {{ cluster }} was not found or it does not have the 'token' key"
        when:
          - not token_secret_info.resources | default([])
          - not (token_secret_info.resources[0].data | default({})).token is defined

      - name: Decode and store the cluster token in a variable
        ansible.builtin.set_fact:
          cluster_token: "{{ token_secret_info.resources[0].data.token | b64decode }}"
        no_log: true # Avoid printing the content in the log output
        when: (token_secret_info.resources[0].data | default({})).token is defined

      - name: Obtain cluster API via ManagedCluster
        # Obtaining the managedcluster object that contains the cluster API
        kubernetes.core.k8s_info:
          api_key: "{{ leaf_hub_token }}"
          host: "{{ leaf_hub_cluster_api }}"
          validate_certs: false
          api_version: 'cluster.open-cluster-management.io/v1'
          kind: ManagedCluster
          name: "{{ cluster }}"
        register: managedcluster_info

      - name: Decode and store the cluster API in a variable
        # Sets the cluster API in the cluster_api variable
        ansible.builtin.set_fact:
          cluster_api: "{{ managedcluster_info.resources[0].spec.managedClusterClientConfigs[0].url }}"
        when: (managedcluster_info.resources[0].spec.managedClusterClientConfigs[0] | default({})).url is defined

      - name: Show the token and cluster API info.
        ansible.builtin.debug:
          msg: "Token is {{ cluster_token }} and API is {{ cluster_api }}"
        when:
          - cluster_token is defined
          - cluster_api is defined

    when: item.leafHubName != "local-cluster"

  - name: Set facts and create or update credential for Leaf hub cluster
    block:
      - name: Set cluster name, token, and API facts for downstream tasks
        ansible.builtin.set_fact:
          cred_cluster_name: "{{ cluster }}"
          cred_cluster_token: "{{ cluster_token }}"
          cred_cluster_api: "{{ cluster_api }}"
        when:
          - cluster_token is defined
          - cluster_api is defined
          - cluster is defined

      - name: Create or update the credential for the Leaf hub cluster in the secret store
        # Store Bearer token and cluster API as credentials. 
        ansible.builtin.include_tasks: create_aap_credential_token.yaml # Secret store is AAP.
        when:
          - cred_cluster_token is defined
          - cred_cluster_api is defined
          - cred_cluster_name is defined

  - name: Deploy the emojivoto app
    # Deploy the emojivoto app in the cluster.  
    ansible.builtin.include_tasks: deploy_emojivoto_managedsa.yaml # Reference the new file
    when:
      - cluster_token is defined
      - cluster_api is defined